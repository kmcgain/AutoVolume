package com.prongs.autovolume;

import org.w3c.dom.Text;

import android.os.Bundle;
import android.os.Handler;
import android.app.Activity;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.widget.EditText;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.MediaRecorder;

public class MainActivity extends Activity {
	private MediaRecorder recorder;
	private Handler handler;
	private Runnable audioTimer;
	private EditText ampText;
	private AudioRecord record;
	private short[] buffer;
	private int bufferSize;
	RollingBuffer rollingBuffer;
	
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        ampText = (EditText)findViewById(R.id.ampDisplay);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }
    
    public void volume100_Click(View view) {
    	Intent intent = new Intent("org.leetzone.android.yatsewidget.ACTION_MEDIA_COMMAND");
    	intent.putExtra("org.leetzone.android.yatsewidget.EXTRA_STRING_PARAMS", "volume");
    	intent.putExtra("org.leetzone.android.yatsewidget.EXTRA_INT_PARAMS", 100);
    	
    	startService(intent);
    }

    public void volume90_Click(View view) {
    	Intent intent = new Intent("org.leetzone.android.yatsewidget.ACTION_MEDIA_COMMAND");
    	intent.putExtra("org.leetzone.android.yatsewidget.EXTRA_STRING_PARAMS", "volume");
    	intent.putExtra("org.leetzone.android.yatsewidget.EXTRA_INT_PARAMS", 90);
    	
    	startService(intent);
    }
    
    public void startListening_Click(View view) {
    	if (recorder == null) {
    		int sampleRate = 8000;
    		int numberOfSeconds = 10;
    		bufferSize = AudioRecord.getMinBufferSize(sampleRate,  AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT);
			record = new AudioRecord(MediaRecorder.AudioSource.MIC, sampleRate, AudioFormat.CHANNEL_CONFIGURATION_MONO, AudioFormat.ENCODING_PCM_16BIT, bufferSize);
			
			buffer = new short[bufferSize];
        	handler = new Handler();   
        	rollingBuffer = new RollingBuffer(sampleRate * 2 * numberOfSeconds, 2);
        	
        	Runnable audioReader = new Runnable() {
        		public void run() {
        			byte[] buffer = new byte[bufferSize];
                	int bufferReadResult;
        			
        			while(true) {
        				bufferReadResult = 0;
        				while (bufferSize > bufferReadResult)
        	            {
        	                bufferReadResult = bufferReadResult + 
        	                        record.read(buffer, bufferReadResult - 1, bufferSize - bufferReadResult);
        	            }   
        	            
        	            rollingBuffer.AddData(buffer, bufferReadResult);        	            
        			}
        			
        		}
        	
        	};
        	
        	record.startRecording();
        	
        	Thread thread = new Thread(audioReader);
        	thread.start();
    	}    	
    }
    
    public void stopListening_Click(View view) {
    	if (handler != null) {
    		handler.removeCallbacks(audioTimer);
    		recorder.stop();
    		recorder.release();
    		recorder = null;
    		handler = null;
    	}
    }
}
